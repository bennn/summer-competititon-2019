#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 72
(
 #"((lib \"private/editor.rkt\" \"video\") (lib \"private/editor.rkt\" "
 #"\"video\"))\0"
) 0 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 225 0 4 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"; baseball-cap.rkt"
0 0 4 29 1 #"\n"
0 0 4 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 48 #"; Draw baseball caps using Racket's pict library"
0 0 4 29 1 #"\n"
0 0 4 3 74
(
 #"; Created for Stephen De Gabrielle's Summer 2019 standard-fish compe"
 #"tition"
) 0 0 4 29 1 #"\n"
0 0 4 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"; Modification History"
0 0 4 29 1 #"\n"
0 0 4 3 51 #"; -------------------------------------------------"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"; 08/12/2019   Justin Zamo"
0 0 4 3 21 #"ra   Initial creation"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"(provide baseball-cap)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"(require racket/contract)"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"(require racket/draw)"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"(require pict)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 56 #";-------------------------------------------------------"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"; Size of logo area on cap"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"(define LOGOWIDTH 160)"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"(define LOGOHEIGHT 80)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"; Create a pict of "
0 0 4 3 55 #"a baseball cap.  Accept a color object or a color name."
0 0 4 29 1 #"\n"
0 0 4 3 66
#"(define/contract (baseball-cap color [logo (blank 1)] [scale? #t])"
0 0 4 29 1 #"\n"
0 0 4 3 64
#"  (->* ((or/c string? (is-a?/c color%))) (pict? boolean?) pict?)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"  ; Pict of the cap"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"  (define cap"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"    (dc (lambda (dc dx dy)"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"          ; "
0 0 4 3 30 #"Save the current pen and brush"
0 0 4 29 1 #"\n"
0 0 4 3 48 #"          (define old-brush (send dc get-brush))"
0 0 4 29 1 #"\n"
0 0 4 3 44 #"          (define old-pen (send dc get-pen))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 52 #"          ; Set a new brush with the specified color"
0 0 4 29 1 #"\n"
0 0 4 3 71
(
 #"          (send dc set-brush (new brush% [style 'solid] [color color"
 #"]))"
) 0 0 4 29 1 #"\n"
0 0 4 3 12 #"          (s"
0 0 4 3 32 #"end dc set-pen \"Black\" 2 'solid)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"          ; Bill"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"          (let ([path (new dc-path%)])"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"            (send path move-to 68.96 143.2)"
0 0 4 29 1 #"\n"
0 0 4 3 69
(
 #"            (send path curve-to 68.96 143.2 -4.742 213.2 1.358 233.2"
 #")"
) 0 0 4 29 1 #"\n"
0 0 4 3 58 #"            (send path curve-to 7.258 263.2 93.96 273.2 93"
0 0 4 3 10 #".96 273.2)"
0 0 4 29 1 #"\n"
0 0 4 3 62
#"            (send path curve-to 116.8 276 179 283.2 239 243.2)"
0 0 4 29 1 #"\n"
0 0 4 3 62
#"            (send path curve-to 279 213.2 289 193.2 289 193.2)"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"            (send dc draw-path path dx dy))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"          ; Crown"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"          (let ([path (new dc-path%)])"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"            (send "
0 0 4 3 23 #"path move-to 47.96 163)"
0 0 4 29 1 #"\n"
0 0 4 3 65
#"            (send path curve-to 65.96 25.3 90.96 3.699 209 3.969)"
0 0 4 29 1 #"\n"
0 0 4 3 66
#"            (send path curve-to 309 4.999 330.9 84.93 338.6 142.7)"
0 0 4 29 1 #"\n"
0 0 4 3 62
#"            (send path curve-to 344 182.3 329 183.2 289 193.2)"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"            (send path curve-to 254.5 188."
0 0 4 3 24 #"3 119 143.2 47.96 163.2)"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"            (send dc draw-path path dx dy))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"          ; Center Seam"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"          (let ([path (new dc-path%)])"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"            (send path move-to 209 4.229)"
0 0 4 29 1 #"\n"
0 0 4 3 62
#"            (send path curve-to 159 -0.4011 149 54.3 149 62.3)"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"            (send dc draw"
0 0 4 3 18 #"-path path dx dy))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"          ; Left Seam"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"          (let ([path (new dc-path%)])"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"            (send path move-to 209 4.229)"
0 0 4 29 1 #"\n"
0 0 4 3 60
#"            (send path curve-to 249 7.899 269 36.3 279 66.3)"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"            (send dc draw-path path dx dy))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"          ; Button"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"          (sen"
0 0 4 3 33 #"d dc draw-ellipse 184 1 20 10)   "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"          ; Eyelets"
0 0 4 29 1 #"\n"
0 0 4 3 46 #"          (send dc draw-ellipse 120 22 9 8)   "
0 0 4 29 1 #"\n"
0 0 4 3 46 #"          (send dc draw-ellipse 198 28 9 8)   "
0 0 4 29 1 #"\n"
0 0 4 3 46 #"          (send dc draw-ellipse 268 25 9 8)   "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 46 #"          ; Restore the original pen and brush"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"          (send dc "
0 0 4 3 20 #"set-brush old-brush)"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"          (send dc set-pen old-pen))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"        342 278))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"  ; Sanity check the size of the logo"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"  (when (or (zero? (pict-width logo))"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"            (zero? (pict-height logo)))"
0 0 4 29 1 #"\n"
0 0 4 3 58
#"    (error 'baseball-cap \"Logo has zero width or height\"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"  ; Scale"
0 0 4 3 53 #" the logo and superimpose it in the center of the cap"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"  (let ([w (pict-width logo)]"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"        [h (pict-height logo)])"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"    (let ([factor (cond"
0 0 4 29 1 #"\n"
0 0 4 3 79
(
 #"                    [(false? scale?) 1] ; Don't scale if the argumen"
 #"t was false"
) 0 0 4 29 1 #"\n"
0 0 4 3 43 #"                    [(>= (/ w h) 1) (/ LOGO"
0 0 4 3 35 #"WIDTH w)] ; Logo is wider than high"
0 0 4 29 1 #"\n"
0 0 4 3 73
(
 #"                    [else (/ LOGOHEIGHT h)])]) ; Logo is higher than"
 #" wide"
) 0 0 4 29 1 #"\n"
0 0 4 3 39 #"      ; Center the logo in the logo box"
0 0 4 29 1 #"\n"
0 0 4 3 52 #"      (let ([h-amt (/ (- LOGOWIDTH (* w factor)) 2)]"
0 0 4 29 1 #"\n"
0 0 4 3 54 #"            [v-amt (/ (- LOGOHEIGHT (* h factor)) 2)])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 3 59
#"    ; Shear and superimpose the logo, and return the result"
0 0 4 29 1 #"\n"
0 0 4 3 81
(
 #"        (cb-superimpose cap (shear (inset (inset (scale logo factor)"
 #" h-amt v-amt)"
) 0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                          0 0 0 110)"
0 0 4 29 1 #"\n"
0 0 4 3 47 #"                                   0 0.15))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"; Test cases"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"(modul"
0 0 4 3 7 #"e+ main"
0 0 4 29 1 #"\n"
0 0 4 3 47 #"  ; Create a blue cap with a \"Racket\" text logo"
0 0 4 29 1 #"\n"
0 0 4 3 47 #"  (baseball-cap \"LightSkyBlue\" (text \"Racket\"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 60
#"  ; A cap with the standard-fish logo, scaled to fit the cap"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"  (baseball-cap \"LightSalmon\" (standard-fish 100 50))"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"  ; A standard-fish cap, with the logo uns"
0 0 4 3 5 #"caled"
0 0 4 29 1 #"\n"
0 0 4 3 67
(
 #"  (baseball-cap \"LightSalmon\" (inset (standard-fish 100 50) 20) #f"
 #")"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 68
#"  ; A little love for my alma mater. You need to install the iu-pict"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"  ; package using: raco pkg install iu-pict"
0 0 4 29 1 #"\n"
0 0 4 3 20 #" ; (require iu-pict)"
0 0 4 29 1 #"\n"
0 0 4 3 55 #"  (baseball-cap (make-color 237 235 235) (iu-logo 80)))"
0           0
